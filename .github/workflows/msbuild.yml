name: Build and Release WireGuard for Windows

on:
  push:
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:

env:
  PLATFORM: x64
  CONFIGURATION: Release

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install nasm
      run: choco install nasm -y
    
   
    - name: Install WiX Toolset and 7zip
      run: |
        choco install wixtoolset -y
        choco install 7zip -y
        

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Set up Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable

    #- name: Display build environment
    #  run: |
    #    go version
    #    rustc --version
    #    nasm -v
    #    heat -?

    - name: Build using build.bat
      run: |
        .\build.bat

    - name: Run tests
      run: |
        go test ./...

    - name: Create release package
      run: |
        mkdir artifacts
        # 复制构建产物
        Copy-Item ".\x64\Release\*.exe" -Destination ".\artifacts\" -ErrorAction SilentlyContinue
        Copy-Item ".\x64\Release\*.dll" -Destination ".\artifacts\" -ErrorAction SilentlyContinue
        Copy-Item ".\*.msi" -Destination ".\artifacts\" -ErrorAction SilentlyContinue
        
        # 如果有其他架构的构建，也包含进来
        if (Test-Path ".\x86\Release") {
            mkdir artifacts\x86
            Copy-Item ".\x86\Release\*" -Destination ".\artifacts\x86\" -ErrorAction SilentlyContinue
        }
        
        # 创建zip包
        7z a wireguard-binaries.zip .\artifacts\*

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wireguard-binaries
        path: |
          wireguard-binaries.zip
          artifacts/*.msi
          artifacts/*.exe
          artifacts/*.dll

  make-build:
    runs-on: windows-latest
    needs: build
    if: ${{ always() }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup GNU Make
      run: choco install -y make

    - name: Build using Makefile
      run: |
        make --version
        # 尝试使用Makefile构建（如果项目支持）
        if (Test-Path "Makefile") {
            make || echo "Make build failed, continuing with other methods"
        }

  create-release:
    needs: [build, make-build]
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: wireguard-binaries
        path: ./downloaded-artifacts

    - name: List downloaded files
      run: Get-ChildItem -Recurse ./downloaded-artifacts

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ./downloaded-artifacts/wireguard-binaries.zip
          ./downloaded-artifacts/*.msi
          ./downloaded-artifacts/*.exe
          ./downloaded-artifacts/*.dll
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 可选：添加矩阵构建以支持不同架构
  matrix-build:
    strategy:
      matrix:
        platform: [x64, x86]
        configuration: [Release, Debug]
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup build tools
      run: |
        choco install -y nasm
        choco install -y wixtoolset

    - name: Build for ${{ matrix.platform }} (${{ matrix.configuration }})
      run: |
        # 设置平台和配置参数
        $env:PLATFORM = "${{ matrix.platform }}"
        $env:CONFIGURATION = "${{ matrix.configuration }}"
        .\build.bat

    - name: Upload ${{ matrix.platform }} ${{ matrix.configuration }} artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wireguard-${{ matrix.platform }}-${{ matrix.configuration }}
        path: |
          ${{ matrix.platform }}/${{ matrix.configuration }}/*.exe
          ${{ matrix.platform }}/${{ matrix.configuration }}/*.dll
