name: Build and Release WireGuard

on:
  push:
    tags:
      - 'v*.*.*'
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20.14'

      - name: Install Dependencies (Windows)
        run: |
          .\build.bat installdeps
          
      - name: Build All Architectures
        run: |
          .\build.bat build
      
      - name: List built files
        run: |
          dir amd64
          #dir x86
          #dir arm64
      
      
      - name: Create release (on tag push)
        id: create_release
        #if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Release Assets (on tag push)
        #if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./amd64/wireguard.exe
          asset_name: wireguard-amd64.exe
          asset_content_type: application/octet-stream
      
      - name: Upload Release Assets (wg.exe)
        #if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./amd64/wg.exe
          asset_name: wg-amd64.exe
          asset_content_type: application/octet-stream
